# K6 Load Test: <%= title %>

## Total Requests

- **HTTP Requests**: `<%= data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0 %>`
- **gRPC Requests**: `<%= data.metrics.grpc_reqs ? data.metrics.grpc_reqs.values.count : 0 %>`
- **Passes**: `<%= data.metrics.http_req_failed ? data.metrics.http_req_failed.values.passes : 0 %>`
- **Breached Thresholds**: `<%= thresholdFailures %>`
- **Failed Checks**: `<%= data.root_group.checks.length %>`

## Request Metrics (HTTP)

| Metric                  | Count   | Rate    | Average | Maximum | Median  | Minimum | 90th Pctl | 95th Pctl |
| ----------------------- | ------- | ------- | ------- | ------- | ------- | ------- | ---------- | ---------- |
<% for (metricName of standardMetrics) { %>
| **<%= metricName %>** | <%= data.metrics[metricName] ? data.metrics[metricName].values.count.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values.rate.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values.avg.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values.max.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values.med.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values.min.toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values['p(90)'].toFixed(2) : '' %> | <%= data.metrics[metricName] ? data.metrics[metricName].values['p(95)'].toFixed(2) : '' %> |
<% } %>

## Custom Metrics

| Metric                       | Count | Rate  | Average | Maximum | Median | Minimum | 90th Pctl | 95th Pctl |
| ---------------------------- | ----- | ----- | ------- | ------- | ------ | ------- | ---------- | ---------- |
<% for (metricName of Object.keys(data.metrics).filter(metricName => !standardMetrics.includes(metricName) && otherMetrics.includes(metricName)) { %>
| **<%= metricName %>** | <%= data.metrics[metricName].values.count.toFixed(2) %> | <%= data.metrics[metricName].values.rate.toFixed(2) %> | <%= data.metrics[metricName].values.avg.toFixed(2) %> | <%= data.metrics[metricName].values.max.toFixed(2) %> | <%= data.metrics[metricName].values.med.toFixed(2) %> | <%= data.metrics[metricName].values.min.toFixed(2) %> | <%= data.metrics[metricName].values['p(90)'].toFixed(2) %> | <%= data.metrics[metricName].values['p(95)'].toFixed(2) %> |
<% } %>

## Other Stats

### Checks

- **Passed**: `<%= data.metrics.checks ? data.metrics.checks.values.passes : 0 %>`
- **Failed**: `<%= data.metrics.checks ? data.metrics.checks.values.fails : 0 %>`

### Iterations

- **Total**: `<%= data.metrics.iterations ? data.metrics.iterations.values.count : 0 %>`
- **Rate**: `<%= data.metrics.iterations ? data.metrics.iterations.values.rate.toFixed(2) + '/s' : '0' %>`

### Virtual Users

- **Min**: `<%= data.metrics.vus ? data.metrics.vus.values.min : 0 %>`
- **Max**: `<%= data.metrics.vus ? data.metrics.vus.values.max : 0 %>`

### Requests

- **Total**: `<%= data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0 %>`
- **Rate**: `<%= data.metrics.http_reqs ? data.metrics.http_reqs.values.rate.toFixed(2) + '/s' : '0' %>`

### Data Received

- **Total**: `<%= (data.metrics.data_received.values.count / 1000000).toFixed(2) %> MB`
- **Rate**: `<%= (data.metrics.data_received.values.rate / 1000000).toFixed(2) %> mB/s`

### Data Sent

- **Total**: `<%= (data.metrics.data_sent.values.count / 1000000).toFixed(2) %> MB`
- **Rate**: `<%= (data.metrics.data_sent.values.rate / 1000000).toFixed(2) %> mB/s`

## Checks & Groups

<% for (group of data.root_group.groups) { %>
### Group - <%= group.name %>

| Check Name | Passes | Failures |
| ---------- | ------ | -------- |
<% for (check of group.checks) { %>
| <%= check.name %> | `<%= check.passes %>` | `<%= check.fails %>` |
<% } %>
<% } %>

### Other Checks

| Check Name | Passes | Failures |
| ----------  | ------ | -------- |
<% for (check of data.root_group.checks) { %>
| <%= check.name %> | `<%= check.passes %>` | `<%= check.fails %>` |
<% } %>

K6 Markdown Reporter v<%= version %> - [GitHub](https://github.com/benc-uk/k6-reporter)
